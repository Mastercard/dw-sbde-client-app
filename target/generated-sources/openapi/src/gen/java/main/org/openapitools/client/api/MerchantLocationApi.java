/*
 * Small Business Decision Enhancer API
 * API for retrieving small business performance metrics such as daily, weekly, monthly and yearly metrics. These metrics detail information such as the number of transactions, amount spent and the breakdown of types of transactions at these locations.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.MerchantLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantLocationApi {
    private ApiClient apiClient;

    public MerchantLocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantLocationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getMerchantLocationByMerchantLocationId
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationByMerchantLocationIdCall(Long merchantLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/merchant-locations/{merchant_location_id}"
            .replaceAll("\\{" + "merchant_location_id" + "\\}", apiClient.escapeString(merchantLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMerchantLocationByMerchantLocationIdValidateBeforeCall(Long merchantLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantLocationId' is set
        if (merchantLocationId == null) {
            throw new ApiException("Missing the required parameter 'merchantLocationId' when calling getMerchantLocationByMerchantLocationId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMerchantLocationByMerchantLocationIdCall(merchantLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get merchant information by merchant_location_id
     * Returns information about a merchant location based on the merchant_location_id.
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @return MerchantLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLocation getMerchantLocationByMerchantLocationId(Long merchantLocationId) throws ApiException {
        ApiResponse<MerchantLocation> resp = getMerchantLocationByMerchantLocationIdWithHttpInfo(merchantLocationId);
        return resp.getData();
    }

    /**
     * Get merchant information by merchant_location_id
     * Returns information about a merchant location based on the merchant_location_id.
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @return ApiResponse&lt;MerchantLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLocation> getMerchantLocationByMerchantLocationIdWithHttpInfo(Long merchantLocationId) throws ApiException {
        com.squareup.okhttp.Call call = getMerchantLocationByMerchantLocationIdValidateBeforeCall(merchantLocationId, null, null);
        Type localVarReturnType = new TypeToken<MerchantLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get merchant information by merchant_location_id (asynchronously)
     * Returns information about a merchant location based on the merchant_location_id.
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationByMerchantLocationIdAsync(Long merchantLocationId, final ApiCallback<MerchantLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMerchantLocationByMerchantLocationIdValidateBeforeCall(merchantLocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
