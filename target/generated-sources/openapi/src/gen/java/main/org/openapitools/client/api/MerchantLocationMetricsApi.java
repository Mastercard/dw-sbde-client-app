/*
 * Small Business Decision Enhancer API
 * API for retrieving small business performance metrics such as daily, weekly, monthly and yearly metrics. These metrics detail information such as the number of transactions, amount spent and the breakdown of types of transactions at these locations.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import java.time.LocalDate;
import org.openapitools.client.model.MerchantLocationDailyMetrics;
import org.openapitools.client.model.MerchantLocationMonthlyMetrics;
import org.openapitools.client.model.MerchantLocationWeeklyMetrics;
import org.openapitools.client.model.MerchantLocationYearlyMetrics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantLocationMetricsApi {
    private ApiClient apiClient;

    public MerchantLocationMetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantLocationMetricsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getMerchantLocationDailyMetricsByMerchantLocationId
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationDailyMetricsByMerchantLocationIdCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/merchant-locations/{merchant_location_id}/metrics/daily-metrics"
            .replaceAll("\\{" + "merchant_location_id" + "\\}", apiClient.escapeString(merchantLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMerchantLocationDailyMetricsByMerchantLocationIdValidateBeforeCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantLocationId' is set
        if (merchantLocationId == null) {
            throw new ApiException("Missing the required parameter 'merchantLocationId' when calling getMerchantLocationDailyMetricsByMerchantLocationId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMerchantLocationDailyMetricsByMerchantLocationIdCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get merchant daily metrics by merchant_location_id
     * Returns the daily metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return MerchantLocationDailyMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLocationDailyMetrics getMerchantLocationDailyMetricsByMerchantLocationId(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<MerchantLocationDailyMetrics> resp = getMerchantLocationDailyMetricsByMerchantLocationIdWithHttpInfo(merchantLocationId, fromDate, toDate, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Get merchant daily metrics by merchant_location_id
     * Returns the daily metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return ApiResponse&lt;MerchantLocationDailyMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLocationDailyMetrics> getMerchantLocationDailyMetricsByMerchantLocationIdWithHttpInfo(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getMerchantLocationDailyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<MerchantLocationDailyMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get merchant daily metrics by merchant_location_id (asynchronously)
     * Returns the daily metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationDailyMetricsByMerchantLocationIdAsync(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ApiCallback<MerchantLocationDailyMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMerchantLocationDailyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLocationDailyMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMerchantLocationMonthlyMetricsByMerchantLocationId
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationMonthlyMetricsByMerchantLocationIdCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/merchant-locations/{merchant_location_id}/metrics/monthly-metrics"
            .replaceAll("\\{" + "merchant_location_id" + "\\}", apiClient.escapeString(merchantLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMerchantLocationMonthlyMetricsByMerchantLocationIdValidateBeforeCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantLocationId' is set
        if (merchantLocationId == null) {
            throw new ApiException("Missing the required parameter 'merchantLocationId' when calling getMerchantLocationMonthlyMetricsByMerchantLocationId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMerchantLocationMonthlyMetricsByMerchantLocationIdCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get monthly metrics for a location by merchant_location_id
     * Returns the monthly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return MerchantLocationMonthlyMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLocationMonthlyMetrics getMerchantLocationMonthlyMetricsByMerchantLocationId(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<MerchantLocationMonthlyMetrics> resp = getMerchantLocationMonthlyMetricsByMerchantLocationIdWithHttpInfo(merchantLocationId, fromDate, toDate, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Get monthly metrics for a location by merchant_location_id
     * Returns the monthly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return ApiResponse&lt;MerchantLocationMonthlyMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLocationMonthlyMetrics> getMerchantLocationMonthlyMetricsByMerchantLocationIdWithHttpInfo(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getMerchantLocationMonthlyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<MerchantLocationMonthlyMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get monthly metrics for a location by merchant_location_id (asynchronously)
     * Returns the monthly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationMonthlyMetricsByMerchantLocationIdAsync(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ApiCallback<MerchantLocationMonthlyMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMerchantLocationMonthlyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLocationMonthlyMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMerchantLocationWeeklyMetricsByMerchantLocationId
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationWeeklyMetricsByMerchantLocationIdCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/merchant-locations/{merchant_location_id}/metrics/weekly-metrics"
            .replaceAll("\\{" + "merchant_location_id" + "\\}", apiClient.escapeString(merchantLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMerchantLocationWeeklyMetricsByMerchantLocationIdValidateBeforeCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantLocationId' is set
        if (merchantLocationId == null) {
            throw new ApiException("Missing the required parameter 'merchantLocationId' when calling getMerchantLocationWeeklyMetricsByMerchantLocationId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMerchantLocationWeeklyMetricsByMerchantLocationIdCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get weekly metrics for a location by merchant_location_id
     * Returns the weekly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return MerchantLocationWeeklyMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLocationWeeklyMetrics getMerchantLocationWeeklyMetricsByMerchantLocationId(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<MerchantLocationWeeklyMetrics> resp = getMerchantLocationWeeklyMetricsByMerchantLocationIdWithHttpInfo(merchantLocationId, fromDate, toDate, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Get weekly metrics for a location by merchant_location_id
     * Returns the weekly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return ApiResponse&lt;MerchantLocationWeeklyMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLocationWeeklyMetrics> getMerchantLocationWeeklyMetricsByMerchantLocationIdWithHttpInfo(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getMerchantLocationWeeklyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<MerchantLocationWeeklyMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get weekly metrics for a location by merchant_location_id (asynchronously)
     * Returns the weekly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationWeeklyMetricsByMerchantLocationIdAsync(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ApiCallback<MerchantLocationWeeklyMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMerchantLocationWeeklyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLocationWeeklyMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMerchantLocationYearlyMetricsByMerchantLocationId
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationYearlyMetricsByMerchantLocationIdCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/merchant-locations/{merchant_location_id}/metrics/yearly-metrics"
            .replaceAll("\\{" + "merchant_location_id" + "\\}", apiClient.escapeString(merchantLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMerchantLocationYearlyMetricsByMerchantLocationIdValidateBeforeCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantLocationId' is set
        if (merchantLocationId == null) {
            throw new ApiException("Missing the required parameter 'merchantLocationId' when calling getMerchantLocationYearlyMetricsByMerchantLocationId(Async)");
        }
        

        com.squareup.okhttp.Call call = getMerchantLocationYearlyMetricsByMerchantLocationIdCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get yearly metrics for a location by merchant_location_id
     * Returns the yearly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return MerchantLocationYearlyMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLocationYearlyMetrics getMerchantLocationYearlyMetricsByMerchantLocationId(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<MerchantLocationYearlyMetrics> resp = getMerchantLocationYearlyMetricsByMerchantLocationIdWithHttpInfo(merchantLocationId, fromDate, toDate, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Get yearly metrics for a location by merchant_location_id
     * Returns the yearly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return ApiResponse&lt;MerchantLocationYearlyMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLocationYearlyMetrics> getMerchantLocationYearlyMetricsByMerchantLocationIdWithHttpInfo(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getMerchantLocationYearlyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<MerchantLocationYearlyMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get yearly metrics for a location by merchant_location_id (asynchronously)
     * Returns the yearly metrics for a location using the locations merchant_location_id. The results are configurable by page size (limit), offset and sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param limit Maximum number of items to return. (optional, default to 20)
     * @param offset Number of items to skip before returning the results. (optional, default to 0)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMerchantLocationYearlyMetricsByMerchantLocationIdAsync(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, Integer limit, Integer offset, String sort, final ApiCallback<MerchantLocationYearlyMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMerchantLocationYearlyMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLocationYearlyMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
