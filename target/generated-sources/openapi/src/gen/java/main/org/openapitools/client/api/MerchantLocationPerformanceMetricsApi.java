/*
 * Small Business Decision Enhancer API
 * API for retrieving small business performance metrics such as daily, weekly, monthly and yearly metrics. These metrics detail information such as the number of transactions, amount spent and the breakdown of types of transactions at these locations.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import java.time.LocalDate;
import org.openapitools.client.model.MerchantLocationPerformanceMetrics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantLocationPerformanceMetricsApi {
    private ApiClient apiClient;

    public MerchantLocationPerformanceMetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantLocationPerformanceMetricsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPerformanceMetricsByMerchantLocationId
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPerformanceMetricsByMerchantLocationIdCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/merchant-locations/{merchant_location_id}/metrics/merchant-performance-metrics"
            .replaceAll("\\{" + "merchant_location_id" + "\\}", apiClient.escapeString(merchantLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to_date", toDate));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPerformanceMetricsByMerchantLocationIdValidateBeforeCall(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantLocationId' is set
        if (merchantLocationId == null) {
            throw new ApiException("Missing the required parameter 'merchantLocationId' when calling getPerformanceMetricsByMerchantLocationId(Async)");
        }
        

        com.squareup.okhttp.Call call = getPerformanceMetricsByMerchantLocationIdCall(merchantLocationId, fromDate, toDate, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get merchant performance metrics by merchant_location_id
     * Returns all available merchant performance metrics for a location using the locations merchant_location_id. The results are sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return MerchantLocationPerformanceMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MerchantLocationPerformanceMetrics getPerformanceMetricsByMerchantLocationId(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, String sort) throws ApiException {
        ApiResponse<MerchantLocationPerformanceMetrics> resp = getPerformanceMetricsByMerchantLocationIdWithHttpInfo(merchantLocationId, fromDate, toDate, sort);
        return resp.getData();
    }

    /**
     * Get merchant performance metrics by merchant_location_id
     * Returns all available merchant performance metrics for a location using the locations merchant_location_id. The results are sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @return ApiResponse&lt;MerchantLocationPerformanceMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MerchantLocationPerformanceMetrics> getPerformanceMetricsByMerchantLocationIdWithHttpInfo(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getPerformanceMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, sort, null, null);
        Type localVarReturnType = new TypeToken<MerchantLocationPerformanceMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get merchant performance metrics by merchant_location_id (asynchronously)
     * Returns all available merchant performance metrics for a location using the locations merchant_location_id. The results are sorted by +period for ascending or -period for descending. The window size for retrieving results is also configurable by setting the initial date (from_date) as well as the last date (to_date).
     * @param merchantLocationId Merchant Market Hierarchy ID, used as a matching key (required)
     * @param fromDate Initial date for the window to retrieve the metrics for in ISO8601 format. When excluded the current date is used. (optional)
     * @param toDate End date for the window to retrieve the metrics for in ISO8601 format. When excluded the end date will be 3 years from the &#x60;from_date&#x60;. (optional)
     * @param sort Sort order for the metrics. Use -field for sort by field descending and +field for sorting by field ascending. Multiple field are separated by &#39;,&#39;. (optional, default to &quot;-period&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPerformanceMetricsByMerchantLocationIdAsync(Long merchantLocationId, LocalDate fromDate, LocalDate toDate, String sort, final ApiCallback<MerchantLocationPerformanceMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPerformanceMetricsByMerchantLocationIdValidateBeforeCall(merchantLocationId, fromDate, toDate, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MerchantLocationPerformanceMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
